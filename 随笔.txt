Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-06-12T22:13:36+08:00

====== 随笔 ======
创建日期 星期二 12 六月 2018

**IOS APP中，使用h5播放器，默认打开网页的时候，会自动全屏，解决方法webkit-playsinline**

__<video src="1.mp4" webkit-playsinline playsinline x5-playsinline x-webkit-airplay="allow"></video>__  


http://wps-community.org/download.html

1.进入WPS官网下载最新版安装包及字体文件，当前最新的是wps-office_10.1.0.5707~a21_amd64.deb和wps-office-fonts_1.0_all.deb； 
2.下载libpng12-0；
wget http://ftp.cn.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1+deb7u2_amd64.deb
$ sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb
$ sudo dpkg -i wps-office_10.1.0.5707-a21_amd64.deb
$ sudo dpkg -i wps-office-fonts_1.0_all.deb


===== props =====

**type能够指定的类型**
**type可以是以下原生类型：**

String,Number,Boolean,Function,Object,Array,Symbol
**required**
可以使用required选项来声明这个参数是否必须传入。
**default(当type的类型为Array或者Object的时候default必须是一个函数：)**
使用default选项来指定当父组件未传入参数时props变量的默认值：
**validator**
当校验规则很复杂，默认提供的校验规则无法满足的时候可以使用自定义函数来校验。

 __1 props: {__
__ 2     // fooA只接受数值类型的参数__
__ 3     fooA: Number,__
__ 4     // fooB可以接受字符串和数值类型的参数__
__ 5     fooB: [String, Number],__
__ 6     // fooC可以接受字符串类型的参数，并且这个参数必须传入__
__ 7     fooC: {__
__ 8         type: String,__
__ 9         required: true__
__10     },__
__11     // fooD接受数值类型的参数，如果不传入的话默认就是100__
__12     fooD: {__
__13         type: Number,__
__14         default: 100__
__15     },__
__16     // fooE接受对象类型的参数__
__17     fooE: {__
__18         type: Object,__
__19         // 当为对象类型设置默认值时必须使用函数返回__
__20         default: function(){__
__21             return { message: 'Hello, world' }__
__22         }__
__23     },__
__24     // fooF使用一个自定义的验证器__
__25     fooF: {__
__26         validator: function(value){__
__27             return value>=0 && value<=100;__
__28         }__
__29     }__
__30 }__


private class SaveButtonActionListener implements ActionListener{
	public void actionPerformed(ActionEvent e) ({
		String title = titleTextField.getText();	//获得日志标题
		String date = dateTextField.getText();		//获得日志日期
		String name = title + "(" + date + ").txt";	//组织文本文件名称
		File file = new File(urlStr + name);		//创建文本文件对象
		if(!file.exists()) {				//判断文件是否存在
			try{
				file.createNewFile();			//如果不存在则创建文件
			} catch (IOException el) {
				el.printStackTrace();
			}
		}		
		try{
			FileWriter fileWriter = new FileWriter(file);	//创建字符输出流
			fileWriter.writer(textArea.getText());		//将内容写入文本文件
			fileWriter.close();				//关闭字符输出流
		} catch (IOException el) {
			el.printStackTrace();
		}
	}
}
private class SeeButtonActionListener implements ActionListener {
	public void actionPerformed(ActionEvent e) {
		ListDialog listFrame = new ListDialog();
		listFrame.setVisible(true);		//显示日志列表窗体
		File text = listFrame.getText();	//日志对象
		listFrame.dispose();			//销毁日志列表窗体
		if(text != null) {			//查看日志对象是否为空
			String[] infos = text.getName().split("(|)");//分割日志文件的名称
			titleTextField.setText(infos[0]);	//设置日志标题
			dateTextField.setText(infos[1]);	//设置日志日期
			try {
				FileReader fileReader = new FileReader(text);	//创建字符输入流
				char[] cbuf = new char[(int).text.length()];	//创建字符型数组
				fileReader.read(cbuf);				//读入文件内容到字符型数组
				textArea.setText(String.valueOf(cbuf));		//设置日志内容
			} catch (FileNotFoundException el) {
				el.printStackTrace();
			} catch (IOException e2) {
				e2.printStackTrace();
			}
		}
	}
}
